import 'package:dio/dio.dart';
import 'package:networking/src/domain/repo/interceptors_repo.dart';

class GetCsrfTokenInterceptor<T> extends InterceptorsRepo
{
  String? cachedCSRFToken;
  String headerKey;
  String cookieKey;

  GetCsrfTokenInterceptor({required this.headerKey,required this.cookieKey});

  /// Adds CSRF token to headers, if it exists

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    if (cachedCSRFToken != null) {
      options.headers[headerKey] = cachedCSRFToken;
      options.headers['Set-Cookie'] =
      '$cookieKey=$cachedCSRFToken';
    }
    return handler.next(options);
  }

  /// Update CSRF token from [response] headers, if it exists
  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    final token = response.headers.value(headerKey);

    if (token != null) {
      cachedCSRFToken = token;
    }
    return handler.resolve(response);
  }

  @override
  Future<void> onError(DioException err, ErrorInterceptorHandler handler) async {
    if (err.response == null) return handler.next(err);

    /// When request fails with 401 status code, request new CSRF token
    if (err.response?.statusCode == 401) {
      try {
        final tokenDio = Dio(
          BaseOptions(baseUrl: err.requestOptions.baseUrl),
        );

        /// Generate CSRF token
        ///
        /// This is a MOCK REQUEST to generate a CSRF token.
        /// In a real-world scenario, this should be generated by the server.
        final result = await tokenDio.post(
          '/response-headers',
          queryParameters: {
            headerKey: '94d6d1ca-fa06-468f-a25c-2f769d04c26c',
          },
        );

        if (result.statusCode == null ||
            result.statusCode! ~/ 100 != 2) {
          throw DioException(requestOptions: result.requestOptions);
        }

        final updatedToken = result.headers.value(headerKey);
        if (updatedToken == null) {
          throw ArgumentError.notNull(headerKey);
        }

        cachedCSRFToken = updatedToken;

        return handler.next(err);
      } on DioException catch (e) {
        return handler.reject(e);
      }
    }
  }
}